name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  id-token: write

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run full test suite
        run: |
          pytest tests/ -v \
            --cov=src/openmcp \
            --cov-report=term-missing

      - name: Validate version
        if: github.event_name == 'push'
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/}
          PACKAGE_VERSION=$(python -c "import sys; sys.path.insert(0, 'src'); from openmcp import __version__; print(__version__)")
          if [ "$TAG_VERSION" != "v$PACKAGE_VERSION" ]; then
            echo "Tag version ($TAG_VERSION) does not match package version (v$PACKAGE_VERSION)"
            exit 1
          fi

  build-release:
    name: Build Release Assets
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-assets
          path: dist/

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-release
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-assets
          path: dist/

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git tag --sort=-version:refname | head -2 | tail -1)
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          
          # Generate changelog
          echo "## Changes in $CURRENT_TAG" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Get commits since last tag
          if [ -n "$PREV_TAG" ]; then
            echo "### Commits since $PREV_TAG:" >> CHANGELOG.md
            git log --pretty=format:"- %s (%an)" $PREV_TAG..$CURRENT_TAG >> CHANGELOG.md
          else
            echo "### All commits:" >> CHANGELOG.md
            git log --pretty=format:"- %s (%an)" >> CHANGELOG.md
          fi
          
          echo "" >> CHANGELOG.md
          echo "### Files changed:" >> CHANGELOG.md
          if [ -n "$PREV_TAG" ]; then
            git diff --name-only $PREV_TAG..$CURRENT_TAG | sed 's/^/- /' >> CHANGELOG.md
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body_path: CHANGELOG.md
          files: |
            dist/*
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: create-release
    if: github.event_name == 'push' && !contains(github.ref_name, 'alpha') && !contains(github.ref_name, 'beta') && !contains(github.ref_name, 'rc')
    environment: pypi
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-assets
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true

  publish-test-pypi:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: build-release
    if: contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc')
    environment: test-pypi
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-assets
          path: dist/

      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/
          verbose: true